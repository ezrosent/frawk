use crate::{
  arena::Arena,
  ast::{Pattern, Expr, Stmt, Binop, Unop, Prog, FunDec},
  builtins::Function,
  common::Either,
  runtime::{strtoi,strtod},
  lexer::{self, Tok},
};

grammar<'a, 'outer>(arena: &'a Arena<'outer>, buf: &mut Vec<u8>);

pub Prog: Prog<'a,'a,&'a str> = {
    <fs:(NL <Function>)*> NL <begin:Begin?> <pats:PatAction*> <sa:Expr?> <end:End?> =>
        Prog {
            decs: fs,
            begin,
            end,
            pats: {
                let mut pats = pats;
                if let Some(sa) = sa {
                    pats.push((Pattern::Bool(sa), None));
                }
                pats
            }
        }
}

Function: FunDec<'a, 'a, &'a str> = {
    "function" <name:"CALLSTART"> <args:FormalParams?> ")" <body:Block> =>
        FunDec {
          name,
          body,
          args: args.unwrap_or(Default::default()),
       }
}

FormalParams: Vec<&'a str> = {
   NL <"IDENT"> => vec![<>],
   <v:(NL <"IDENT"> ",")+> <iopt:(NL <"IDENT">)?> => match iopt {
      Some(e) => { let mut v = v; v.push(e); v }
      None => v,
   }
}

Begin: &'a Stmt<'a,'a,&'a str> = {
    "BEGIN" NL <Block> NL => <>
}

End: &'a Stmt<'a,'a,&'a str> = {
    "END" NL <Block> NL => <>
}

PatAction: (Pattern<'a,'a,&'a str>, Option<&'a Stmt<'a,'a,&'a str>>) = {
   <p:Expr?> <b:Block> NL => (match p {
                   Some(e) => Pattern::Bool(e),
                   None => Pattern::Null,
              }, Some(b)),
  <l:BaseTerm> "," <r:BaseTerm> <b:Block> NL => (Pattern::Comma(l, r), Some(b)),
}

Stmt: &'a Stmt<'a,'a,&'a str> = {
    "if" "(" <cond:Expr> ")" NL <s1:BaseStmt> "else" NL <s2:Stmt> =>
           arena.alloc_v(Stmt::If(cond, s1, Some(s2))),
    "if" "(" <cond:Expr> ")" NL <s1:BaseStmt> => arena.alloc_v(Stmt::If(cond, s1, None)),
    "do" NL <body:BaseStmt> "while" "(" <cond:Expr> ")" => arena.alloc_v(Stmt::DoWhile(cond, body)),
    "while" NL "(" <cond:Expr> ")" <body:BaseStmt> => arena.alloc_v(Stmt::While(cond, body)),
    "for" "(" <init: ExprNoIn?> ";" <cond:Expr?> ";" <update:Expr?> ")" NL <body:BaseStmt> =>
        arena.alloc_v(Stmt::For(
                init.map(|x| arena.alloc_v(Stmt::Expr(x))),
                cond,
                update.map(|x| arena.alloc_v(Stmt::Expr(x))),
                body
        )),
    "for" "(" <id:"IDENT"> "in" <arr:Expr> ")" NL <body: BaseStmt> =>
        arena.alloc_v(Stmt::ForEach(id, arr, body)),
    BaseStmt,
}

Redirect: (&'a Expr<'a, 'a, &'a str>, bool) = {
    ">" <BaseTerm> => (<>, false),
    ">>" <BaseTerm> => (<>, true),
}


BaseStmt: &'a Stmt<'a,'a,&'a str> = {
    <e: Expr> => arena.alloc_v(Stmt::Expr(e)),
    "delete" <i: IndexBase> =>
        arena.alloc_v(Stmt::Expr(arena.alloc_v(Expr::Call(Either::Right(Function::Delete), vec![i.0, i.1])))),
    "print" <pa:PrintArgs?> <re:Redirect?> =>
        arena.alloc_v(Stmt::Print(pa.unwrap_or(Vec::new()), re)),
    "print(" <pa:(<Args?>)> ")" <re:Redirect?> =>
        arena.alloc_v(Stmt::Print(pa.unwrap_or(Vec::new()), re)),
    "printf" <spec:PrecAdd> <pa: ("," <PrintArgs>)?> <re:Redirect?> =>
        arena.alloc_v(Stmt::Printf(spec, pa.unwrap_or(Vec::new()), re)),
    "printf(" <spec:Expr> <pa: ("," <Args>)?> ")" <re:Redirect?> =>
        arena.alloc_v(Stmt::Printf(spec, pa.unwrap_or(Vec::new()), re)),
    "break" => arena.alloc_v(Stmt::Break),
    "continue" => arena.alloc_v(Stmt::Continue),
    "return" <Expr?> => arena.alloc_v(Stmt::Return(<>)),
    Block,
}

Block: &'a Stmt<'a,'a,&'a str> = {
    "{" NL "}" => arena.alloc_v(Stmt::Block(vec![])),
    "{" NL <Stmt> "}" => <>,
    "{" NL  <BlockInner> "}" => arena.alloc_v(Stmt::Block(<>)),
}

BlockInner: Vec<&'a Stmt<'a,'a,&'a str>> = {
    <v:(<Stmt> Sep)+> <e:Stmt?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

PrintArgs: Vec<&'a Expr<'a,'a,&'a str>> = {
    // To avoid ambiguities with expressions including ">" we jump down the precedence hierarchy
    // past the comparison operators.
    <PrecAdd> => vec![<>],
    <v:(<PrecAdd> ",")+> <e:PrecAdd?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Args: Vec<&'a Expr<'a,'a,&'a str>> = {
    // To avoid ambiguities with expressions including ">" we jump down the precedence hierarchy
    // past the comparison operators.
    NL <Expr> => vec![<>],
    <v:(NL <Expr> ",")+> <e:(NL <Expr?>)> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[inline]
NL: () = "\n"*;

Sep: () = {
    SepBase+
}

SepBase: () = { ";", "\n" }

Expr: &'a Expr<'a,'a,&'a str> = {
    "getline" <into:BaseTerm?> <from:("<" <BaseTerm>)?> => arena.alloc_v(Expr::Getline{ into, from}),
    PrecAsgn
};

PrecAsgn: &'a Expr<'a,'a,&'a str> = {
    <l: PrecIn> "=" <r: PrecAsgn> => arena.alloc_v(Expr::Assign(l, r)),
    <l: PrecIn> "+=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Plus, r)),
    <l: PrecIn> "-=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Minus, r)),
    <l: PrecIn> "*=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Mult, r)),
    <l: PrecIn> "/=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Div, r)),
    <l: PrecIn> "%=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Mod, r)),
    PrecTern,
}

PrecTern: &'a Expr<'a, 'a, &'a str> = {
   <c: PrecOr> "?" <t: PrecTern> ":" <f: PrecTern> => arena.alloc_v(Expr::ITE(c, t, f)),
   PrecOr,
}

PrecOr: &'a Expr<'a, 'a, &'a str> = {
    <l: PrecAnd> "||" <r: PrecOr> => arena.alloc_v(Expr::Or(l, r)),
    PrecAnd,
}

PrecAnd: &'a Expr<'a, 'a, &'a str> = {
    <l: PrecIn> "&&" <r: PrecAnd> => arena.alloc_v(Expr::And(l, r)),
    PrecIn,
}

PrecIn: &'a Expr<'a,'a,&'a str> = {
    <l: PrecMatch> "in" <r: PrecMatch> =>
        arena.alloc_v(Expr::Call(Either::Right(Function::Contains), vec![r, l])),
    PrecMatch,
}

// XXX Replicate the first two layers of the precedence hierarchy to skip "in" expressions to avoid
// ambiguity between beginning of for loop and foreach loop. This is a hack; we should find a way
// to tell LALRPOP the right thing here.
ExprNoIn: &'a Expr<'a,'a,&'a str> = {
    "getline" <into:BaseTerm?> <from:("<" <BaseTerm>)?> => arena.alloc_v(Expr::Getline{ into, from}),
    PrecAsgnNoIn
};

PrecAsgnNoIn: &'a Expr<'a,'a,&'a str> = {
    <l: PrecTernNoIn> "=" <r: PrecAsgn> => arena.alloc_v(Expr::Assign(l, r)),
    <l: PrecTernNoIn> "+=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Plus, r)),
    <l: PrecTernNoIn> "-=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Minus, r)),
    <l: PrecTernNoIn> "*=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Mult, r)),
    <l: PrecTernNoIn> "/=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Div, r)),
    <l: PrecTernNoIn> "%=" <r: PrecAsgn> => arena.alloc_v(Expr::AssignOp(l, Binop::Mod, r)),
    PrecTernNoIn,
}

PrecTernNoIn: &'a Expr<'a, 'a, &'a str> = {
   <c: PrecOrNoIn> "?" <t: PrecTernNoIn> ":" <f: PrecTern> => arena.alloc_v(Expr::ITE(c, t, f)),
   PrecOrNoIn,
}

PrecOrNoIn: &'a Expr<'a, 'a, &'a str> = {
    <l: PrecAndNoIn> "||" <r: PrecOrNoIn> => arena.alloc_v(Expr::Or(l, r)),
    PrecAndNoIn,
}

PrecAndNoIn: &'a Expr<'a, 'a, &'a str> = {
    <l: PrecMatch> "&&" <r: PrecAndNoIn> => arena.alloc_v(Expr::And(l, r)),
    PrecMatch,
}

PrecMatch: &'a Expr<'a,'a,&'a str> = {
    <l: PrecMatch> "~" <r: PrecCmp> => arena.alloc_v(Expr::Binop(Binop::IsMatch, l, r)),
    <l: PrecMatch> "!~" <r: PrecCmp> => arena.alloc_v(Expr::Unop(
            Unop::Not,
            arena.alloc_v(Expr::Binop(Binop::IsMatch, l, r)))),
    PrecCmp,
}

PrecCmp: &'a Expr<'a,'a,&'a str> = {
    <l: PrecAdd> "<" <r: PrecCmp> => arena.alloc_v(Expr::Binop(Binop::LT, l, r)),
    <l: PrecAdd> "<=" <r: PrecCmp> => arena.alloc_v(Expr::Binop(Binop::LTE, l, r)),
    <l: PrecAdd> ">" <r: PrecCmp> => arena.alloc_v(Expr::Binop(Binop::GT, l, r)),
    <l: PrecAdd> ">=" <r: PrecCmp> => arena.alloc_v(Expr::Binop(Binop::GTE, l, r)),
    <l: PrecAdd> "==" <r: PrecCmp> => arena.alloc_v(Expr::Binop(Binop::EQ, l, r)),
    PrecAdd
}

PrecAdd: &'a Expr<'a,'a,&'a str> = {
    <l: PrecAdd> "+" <r:PrecMul>  => arena.alloc_v(Expr::Binop(Binop::Plus, l, r)),
    <l: PrecAdd> "-" <r:PrecMul>  => arena.alloc_v(Expr::Binop(Binop::Minus, l, r)),
    PrecMul,
}

PrecMul: &'a Expr<'a,'a,&'a str> = {
    <l: PrecMul> "*" <r:PrecUnop> => arena.alloc_v(Expr::Binop(Binop::Mult, l, r)),
    <l: PrecMul> "/" <r:PrecUnop> => arena.alloc_v(Expr::Binop(Binop::Div, l, r)),
    <l: PrecMul> "%" <r:PrecUnop> => arena.alloc_v(Expr::Binop(Binop::Mod, l, r)),
    PrecUnop,
}

PrecUnop: &'a Expr<'a,'a,&'a str> = {
    "-" <e: PrecInc> => arena.alloc_v(Expr::Unop(Unop::Neg, e)),
    "+" <e: PrecInc> => arena.alloc_v(Expr::Unop(Unop::Pos, e)),
    "!" <e: PrecInc> => arena.alloc_v(Expr::Unop(Unop::Not, e)),
    PrecInc
}

PrecInc: &'a Expr<'a,'a,&'a str> = {
    <e:CatBaseTerm>"++" => arena.alloc_v(Expr::Inc { is_inc: true, is_post: true, x: e }),
    <e:CatBaseTerm>"--"=> arena.alloc_v(Expr::Inc { is_inc: false, is_post: true, x: e }),
    "++" <e:CatBaseTerm> => arena.alloc_v(Expr::Inc { is_inc: true, is_post: false, x: e }),
    "--" <e:CatBaseTerm> => arena.alloc_v(Expr::Inc { is_inc: false, is_post: false, x: e }),
    CatBaseTerm,
}

CatBaseTerm: &'a Expr<'a,'a, &'a str> = {
    <l: CatBaseTerm> <r: PrecFieldRef> => arena.alloc_v(Expr::Binop(Binop::Concat, l, r)),
    PrecFieldRef
}

PrecFieldRef: &'a Expr<'a,'a,&'a str> = {
    Col,
    BaseTerm
}

Col: &'a Expr<'a,'a,&'a str> = {
    "$" <e:BaseTerm> => arena.alloc_v(Expr::Unop(Unop::Column, e)),
}

Ident: &'a Expr<'a,'a,&'a str> = {
  "IDENT" => arena.alloc_v(Expr::Var(arena.alloc_str(<>))),
}

StrLit: &'a Expr<'a,'a,&'a str> = {
  "STRLIT" => arena.alloc_v(Expr::StrLit(lexer::parse_string_literal(<>, &arena, buf))),
}

Index: &'a Expr<'a,'a,&'a str> = {
    <i:IndexBase> => arena.alloc_v(Expr::Index(i.0, i.1)),
}

IndexBase: (&'a Expr<'a,'a,&'a str>, &'a Expr<'a,'a,&'a str>) = {
  <arr:BaseTerm> "[" <e:Expr> "]" => (arr, e),
}

BaseTerm: &'a Expr<'a,'a, &'a str> = {
  Ident,
  Index,
  StrLit,
  "INT" => arena.alloc_v(Expr::ILit(strtoi(<>))),
  "FLOAT" => arena.alloc_v(Expr::FLit(strtod(<>))),
  "PATLIT" => arena.alloc_v(Expr::PatLit(lexer::parse_regex_literal(<>, &arena, buf))),
  <i:"CALLSTART"> <args:Args?> ")" =>
        arena.alloc_v(Expr::Call(Either::Left(i), args.unwrap_or(vec![]))),
  "(" <e:Expr> ")" => e,
}

extern {
  type Location = usize;
  type Error = lexer::Error;
  enum Tok<'a> {
      "INT" => Tok::ILit(<&'a str>),
      "FLOAT" => Tok::FLit(<&'a str>),
      "IDENT" => Tok::Ident(<&'a str>),
      "STRLIT" => Tok::StrLit(<&'a str>),
      "PATLIT" => Tok::PatLit(<&'a str>),
      "CALLSTART" => Tok::CallStart(<&'a str>),
      "BEGIN" =>  Tok::Begin,
      "END" =>  Tok::End,
      "break" =>  Tok::Break,
      "continue" =>  Tok::Continue,
      "for" =>  Tok::For,
      "if" =>  Tok::If,
      "else" => Tok::Else,
      "print" =>  Tok::Print,
      "print(" =>  Tok::PrintLP,
      "printf" =>  Tok::Printf,
      "printf(" =>  Tok::PrintfLP,
      "while" =>  Tok::While,
      "do" =>  Tok::Do,
      "{" =>  Tok::LBrace,
      "}" =>  Tok::RBrace,
      "[" =>  Tok::LBrack,
      "]" =>  Tok::RBrack,
      "(" =>  Tok::LParen,
      ")" =>  Tok::RParen,
      "getline" =>  Tok::Getline,
      "=" =>  Tok::Assign,
      "+" =>  Tok::Add,
      "+=" =>  Tok::AddAssign,
      "-" =>  Tok::Sub,
      "-=" =>  Tok::SubAssign,
      "*" =>  Tok::Mul,
      "*=" =>  Tok::MulAssign,
      "/" =>  Tok::Div,
      "/=" =>  Tok::DivAssign,
      "%" =>  Tok::Mod,
      "%=" =>  Tok::ModAssign,
      "~" =>  Tok::Match,
      "!~" =>  Tok::NotMatch,
      "==" =>  Tok::EQ,
      "<" =>  Tok::LT,
      "<=" =>  Tok::LTE,
      ">" =>  Tok::GT,
      "--" =>  Tok::Decr,
      "++" =>  Tok::Incr,
      ">=" =>  Tok::GTE,
      ">>" =>  Tok::Append,
      ";" =>  Tok::Semi,
      "$" => Tok::Dollar,
      "\n" =>  Tok::Newline,
      "," =>  Tok::Comma,
      "!" => Tok::Not,
      "||" => Tok::OR,
      "&&" => Tok::AND,
      "?" => Tok::QUESTION,
      ":" => Tok::COLON,
      "delete" => Tok::Delete,
      "in" => Tok::In,
      "function" => Tok::Function,
      "return" => Tok::Return,
  }
}
