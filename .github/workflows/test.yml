name: test

on: [push, pull_request]

jobs:
  test:
    name: Run test
    runs-on: ${{matrix.os}}
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        include:
          - build: linux-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: mac
            os: macOS-latest
            target: x86_64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Recover cache files
        if: hashFiles('**/Cargo.lock') != ''
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install musl-gcc if required
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install musl-tools -yqq
      - name: Setup toolchains
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Prepare make
        run: |
          if [[ ${{ matrix.os }} =~ "mac" ]] ;then
            brew install make -q
          elif [[ ${{ matrix.target }} =~ "musl" ]] ;then
            sudo apt-get install make build-essential -yqq
          else
            echo "unknown os: ${{ matrix.os }}">&2
            exit 1
          fi
      # - name: Install llvm
      #   run : |
      #     cargo install --git https://github.com/llvmenv/llvmenv -q
      #     llvmenv init
      #     llvmenv build-entry 12.0.0
      # - name: Install llvm
      #   run: |
      #     if [[ ${{ matrix.os }} =~ "mac" ]] ;then
      #       brew install make -q
      #       brew install llvm@12 -q
      #     elif [[ ${{ matrix.target }} =~ "musl" ]] ;then
      #       wget -O a https://apt.llvm.org/llvm-snapshot.gpg.key
      #       sudo apt-key add ./a
      #       apt-get update -yqq
      #       sudo apt-get install \
      #       clang-12 clang-tools-12 clang-tidy-12 \
      #       clang-format-12 lldb-12 lld-12 -yqq
      #     else
      #       echo "unknown os: ${{ matrix.os }}">&2
      #       exit 1
      #     fi
      # - name: MacOS - Prepare LLVM
      #   if: contains(matrix.os, 'macos')
      #   run: |
      #     LLVM_PATH=${{ env.LLVM_PATH }}
      #     LLVM_VERSION=${{ matrix.clang }}
      #     ## already done inside install-llvm-action
      #     # echo "PATH="$LLVM_PATH:$PATH"
      #     # echo "LD_LIBRARY_PATH=$LLVM_PATH/lib/:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      #     # echo "DYLD_LIBRARY_PATH=$LLVM_PATH/lib/:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
      #     echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
      #     echo "CPATH=$LLVM_PATH/lib/clang/$LLVM_VERSION/include/" >> $GITHUB_ENV
      #     echo "LDFLAGS=-L$LLVM_PATH/lib" >> $GITHUB_ENV
      #     echo "CPPFLAGS=-I$LLVM_PATH/include" >> $GITHUB_ENV
      #     echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV
      #     echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV
      # - name: Install LLVM and Clang
      #   uses: KyleMayes/install-llvm-action@v1
      #   with:
      #     version: "12.0"
      # - name: Check llvm
      #   run: llvm-config --version
      - name: Build the release target
        run: |
          rustup install nightly
          rustup default nightly
          rustup target add ${{ matrix.target }}
          rustup component add rustfmt
          rustup component add clippy
          if [[ ${{ matrix.target }} =~ "musl" ]] ;then
            CFLAGS="-fPIC" CC="musl-gcc -static" cargo build --no-default-features --features use_jemalloc,allow_avx2,unstable --release --verbose --target x86_64-unknown-linux-musl
          else
            cargo build --no-default-features --features use_jemalloc,allow_avx2,unstable --verbose --release --target ${{ matrix.target }}
          fi
          mv target/${{matrix.target}}/release/frawk target/release
      - name: Test formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Analyze statically
        uses: actions-rs/cargo@v1
        with:
          command: clippy
      - name: Run testcases
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features use_jemalloc,allow_avx2,unstable
